{
    "docs": [
        {
            "location": "/", 
            "text": "subpixelRegistration documentation\n\n\n\n\nUser functions\n\n\n#\n\n\nsubpixelRegistration.stackDftReg\n \n \nMethod\n.\n\n\nstackDftReg{T,N,N1}(imgser::AbstractArray{T,N};ref::AbstractArray{T,N1}=reshape(slicedim(imgser,N,1),size(imgser)[1:(N-1)]),ufac::Int=10)\n\n\ndftReg\n applied to a full array. Each array along the last dimension of \nimgser\n is aligned to \nref\n (by default the first image of the series, with precision \nufac\n. Returns an array of \nDict\n containing the translation information.\n\n\nsource\n\n\n#\n\n\nsubpixelRegistration.alignFromDict\n \n \nMethod\n.\n\n\nalignFromDft{T,N}(img2reg::AbstractArray{T,N},dftRegRes::Array{Any,1})\n\n\nGiven an array and a \nDict\n of translations as returned by \ndftReg\n, returns the aligned array.\n\n\nsource\n\n\n\n\nNon exported functions\n\n\nsubpixelRegistration.subPixShift(imgft::AbstractArray{Complex{Float64}},shift::Array{Float64,1})\n\n\n\n\n#\n\n\nsubpixelRegistration.dftups\n \n \nFunction\n.\n\n\ndftups{T,N}(inp::AbstractArray{T,N},no,usfac::Int=1,off=zeros(N))\n\n\nUpsampled DFT by matrix multiplication, computes an upsampled DFT in just a small region. \nno\n is the size of the region in pixels, \noffset\n the position in the full array, \nusfac\n the upsampling parameter.\n\n\nsource\n\n\n#\n\n\nsubpixelRegistration.dftReg\n \n \nMethod\n.\n\n\ndftReg{N}(imgRef::AbstractArray{Complex{Float64},N},imgF::AbstractArray{Complex{Float64},N},usfac)\n\n\nMain internal function : takes the Fourier transforms of the arrays to register as inputs (\nimgRef\n/\nimgF\n) and returns a dictionary containing the residual error and the shift along the dimensions of the arrays, with the level of subpixel precision provided by \nusfac\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#subpixelregistration-documentation", 
            "text": "", 
            "title": "subpixelRegistration documentation"
        }, 
        {
            "location": "/#user-functions", 
            "text": "#  subpixelRegistration.stackDftReg     Method .  stackDftReg{T,N,N1}(imgser::AbstractArray{T,N};ref::AbstractArray{T,N1}=reshape(slicedim(imgser,N,1),size(imgser)[1:(N-1)]),ufac::Int=10)  dftReg  applied to a full array. Each array along the last dimension of  imgser  is aligned to  ref  (by default the first image of the series, with precision  ufac . Returns an array of  Dict  containing the translation information.  source  #  subpixelRegistration.alignFromDict     Method .  alignFromDft{T,N}(img2reg::AbstractArray{T,N},dftRegRes::Array{Any,1})  Given an array and a  Dict  of translations as returned by  dftReg , returns the aligned array.  source", 
            "title": "User functions"
        }, 
        {
            "location": "/#non-exported-functions", 
            "text": "subpixelRegistration.subPixShift(imgft::AbstractArray{Complex{Float64}},shift::Array{Float64,1})  #  subpixelRegistration.dftups     Function .  dftups{T,N}(inp::AbstractArray{T,N},no,usfac::Int=1,off=zeros(N))  Upsampled DFT by matrix multiplication, computes an upsampled DFT in just a small region.  no  is the size of the region in pixels,  offset  the position in the full array,  usfac  the upsampling parameter.  source  #  subpixelRegistration.dftReg     Method .  dftReg{N}(imgRef::AbstractArray{Complex{Float64},N},imgF::AbstractArray{Complex{Float64},N},usfac)  Main internal function : takes the Fourier transforms of the arrays to register as inputs ( imgRef / imgF ) and returns a dictionary containing the residual error and the shift along the dimensions of the arrays, with the level of subpixel precision provided by  usfac  source", 
            "title": "Non exported functions"
        }
    ]
}
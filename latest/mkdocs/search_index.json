{
    "docs": [
        {
            "location": "/", 
            "text": "subpixelRegistration documentation\n\n\n\n\nUser functions\n\n\n#\n\n\nsubpixelRegistration.stackDftReg\n \n \nFunction\n.\n\n\nstackDftReg{T,N,N1}(imgser::AbstractArray{T,N};ref::AbstractArray{T,N1}=reshape(slicedim(imgser,N,1),size(imgser)[1:(N-1)]),ufac::Int=10)\n\n\ndftReg\n applied to a full array. Each array along the last dimension of \nimgser\n is aligned to \nref\n (by default the first image of the series, with precision \nufac\n. Returns an array of \nDict\n containing the translation information.\n\n\nsource\n\n\nMethods\n\n\n\n\n\n    \nstackDftReg\n{\nT\n, \nN\n}\n(\nimgser\n::\nAbstractArray{T,N}\n)\n\n    defined at\n    \nsrc/dftReg.jl:148\n\n\n\n\n\n\n\n#\n\n\nsubpixelRegistration.alignFromDict\n \n \nFunction\n.\n\n\nalignFromDft{T,N}(img2reg::AbstractArray{T,N},dftRegRes::Array{Any,1})\n\n\nGiven an array and a \nDict\n of translations as returned by \ndftReg\n, returns the aligned array.\n\n\nsource\n\n\nMethods\n\n\n\n\n\n    \nalignFromDict\n{\nT\n, \nN\n}\n(\n\n    \nimg2reg\n::\nAbstractArray{T,N}\n,\n\n    \ndftRegRes\n::\nArray{Any,1}\n\n\n)\n\n    defined at\n    \nsrc/dftReg.jl:166\n\n\n\n\n\n\n\n\n\nNon exported functions\n\n\n#\n\n\nsubpixelRegistration.subPixShift\n \n \nFunction\n.\n\n\nsubPixShift(imgft::AbstractArray{Complex{Float64}},shift::Array{Float64,1})\n\n\nShift the image \nimgft\n (in Fourier space) by the amount provided in the vector \nshift\n.\n\n\nsource\n\n\nMethods\n\n\n\n\n\n    \nsubPixShift\n(\n\n    \nimgft\n::\nAbstractArray{Complex{Float64},N\n<\n:Any}\n,\n\n    \nshift\n::\nArray{Float64,1}\n\n\n)\n\n    defined at\n    \nsrc/dftReg.jl:130\n\n\n\n\n\n\n\n#\n\n\nsubpixelRegistration.dftups\n \n \nFunction\n.\n\n\ndftups{T,N}(inp::AbstractArray{T,N},no,usfac::Int=1,off=zeros(N))\n\n\nUpsampled DFT by matrix multiplication, computes an upsampled DFT in just a small region. \nno\n is the size of the region in pixels, \noffset\n the position in the full array, \nusfac\n the upsampling parameter.\n\n\nsource\n\n\nMethods\n\n\n\n\n\n    \ndftups\n{\nT\n, \nN\n}\n(\ninp\n::\nAbstractArray{T,N}\n, \nno\n)\n\n    defined at\n    \nsrc/dftReg.jl:112\n\n\n\n\n\n    \ndftups\n{\nT\n, \nN\n}\n(\n\n    \ninp\n::\nAbstractArray{T,N}\n,\n\n    \nno\n,\n\n    \nusfac\n::\nInt64\n\n\n)\n\n    defined at\n    \nsrc/dftReg.jl:112\n\n\n\n\n\n    \ndftups\n{\nT\n, \nN\n}\n(\n\n    \ninp\n::\nAbstractArray{T,N}\n,\n\n    \nno\n,\n\n    \nusfac\n::\nInt64\n,\n\n    \noffset\n\n\n)\n\n    defined at\n    \nsrc/dftReg.jl:112\n\n\n\n\n\n\n\n#\n\n\nsubpixelRegistration.dftReg\n \n \nFunction\n.\n\n\ndftReg{N}(imgRef::AbstractArray{Complex{Float64},N},imgF::AbstractArray{Complex{Float64},N},usfac)\n\n\nMain internal function : takes the Fourier transforms of the arrays to register as inputs (\nimgRef\n/\nimgF\n) and returns a dictionary containing the residual error and the shift along the dimensions of the arrays, with the level of subpixel precision provided by \nusfac\n\n\nsource\n\n\nMethods\n\n\n\n\n\n    \ndftReg\n{\nN\n}\n(\n\n    \nimgRef\n::\nAbstractArray{Complex{Float64},N}\n,\n\n    \nimgF\n::\nAbstractArray{Complex{Float64},N}\n,\n\n    \nusfac\n\n\n)\n\n    defined at\n    \nsrc/dftReg.jl:7", 
            "title": "Home"
        }, 
        {
            "location": "/#subpixelregistration-documentation", 
            "text": "", 
            "title": "subpixelRegistration documentation"
        }, 
        {
            "location": "/#user-functions", 
            "text": "#  subpixelRegistration.stackDftReg     Function .  stackDftReg{T,N,N1}(imgser::AbstractArray{T,N};ref::AbstractArray{T,N1}=reshape(slicedim(imgser,N,1),size(imgser)[1:(N-1)]),ufac::Int=10)  dftReg  applied to a full array. Each array along the last dimension of  imgser  is aligned to  ref  (by default the first image of the series, with precision  ufac . Returns an array of  Dict  containing the translation information.  source  Methods   \n     stackDftReg { T ,  N } ( imgser :: AbstractArray{T,N} ) \n    defined at\n     src/dftReg.jl:148    #  subpixelRegistration.alignFromDict     Function .  alignFromDft{T,N}(img2reg::AbstractArray{T,N},dftRegRes::Array{Any,1})  Given an array and a  Dict  of translations as returned by  dftReg , returns the aligned array.  source  Methods   \n     alignFromDict { T ,  N } ( \n     img2reg :: AbstractArray{T,N} ,      dftRegRes :: Array{Any,1}  ) \n    defined at\n     src/dftReg.jl:166", 
            "title": "User functions"
        }, 
        {
            "location": "/#non-exported-functions", 
            "text": "#  subpixelRegistration.subPixShift     Function .  subPixShift(imgft::AbstractArray{Complex{Float64}},shift::Array{Float64,1})  Shift the image  imgft  (in Fourier space) by the amount provided in the vector  shift .  source  Methods   \n     subPixShift ( \n     imgft :: AbstractArray{Complex{Float64},N < :Any} ,      shift :: Array{Float64,1}  ) \n    defined at\n     src/dftReg.jl:130    #  subpixelRegistration.dftups     Function .  dftups{T,N}(inp::AbstractArray{T,N},no,usfac::Int=1,off=zeros(N))  Upsampled DFT by matrix multiplication, computes an upsampled DFT in just a small region.  no  is the size of the region in pixels,  offset  the position in the full array,  usfac  the upsampling parameter.  source  Methods   \n     dftups { T ,  N } ( inp :: AbstractArray{T,N} ,  no ) \n    defined at\n     src/dftReg.jl:112   \n     dftups { T ,  N } ( \n     inp :: AbstractArray{T,N} ,      no ,      usfac :: Int64  ) \n    defined at\n     src/dftReg.jl:112   \n     dftups { T ,  N } ( \n     inp :: AbstractArray{T,N} ,      no ,      usfac :: Int64 ,      offset  ) \n    defined at\n     src/dftReg.jl:112    #  subpixelRegistration.dftReg     Function .  dftReg{N}(imgRef::AbstractArray{Complex{Float64},N},imgF::AbstractArray{Complex{Float64},N},usfac)  Main internal function : takes the Fourier transforms of the arrays to register as inputs ( imgRef / imgF ) and returns a dictionary containing the residual error and the shift along the dimensions of the arrays, with the level of subpixel precision provided by  usfac  source  Methods   \n     dftReg { N } ( \n     imgRef :: AbstractArray{Complex{Float64},N} ,      imgF :: AbstractArray{Complex{Float64},N} ,      usfac  ) \n    defined at\n     src/dftReg.jl:7", 
            "title": "Non exported functions"
        }
    ]
}